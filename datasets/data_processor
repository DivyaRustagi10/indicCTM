import pandas as pd
from typing import List, Union, Optional
import requests
import os

# Default URL for auto-downloading NSFW words list
DEFAULT_NSFW_URL = "https://raw.githubusercontent.com/LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words/master/en"


class DatasetProcessor:
    """A class to process datasets.

    This class provides methods to load a dataset, filter out rows containing NSFW words,
    and generate samples from the dataset.

    Attributes:
        file_path (str): The path to the input file.
        header (int, optional): The row index to use as column names. Default is None.
        sample_with_replacement (bool, optional): Whether to sample with replacement. Default is False.
        delimiter (str, optional): The delimiter used in the input file. Default is '\t'.
        data (pd.DataFrame, optional): The loaded data. Default is None.
    """
    
    def __init__(self, file_path: str, header: Optional[int] = None, 
                 sample_with_replacement: bool = False, delimiter: str = '\t'):
        """Initialize DatasetProcessor.

        Args:
            file_path (str): The path to the input file.
            header (int, optional): The row index to use as column names. Default is None.
            sample_with_replacement (bool, optional): Whether to sample with replacement. Default is False.
            delimiter (str, optional): The delimiter used in the input file. Default is '\t'.
        """
        self.file_path = file_path
        self.header = header
        self.data = None
        self.sample_with_replacement = sample_with_replacement
        self.delimiter = delimiter


    def load_data(self) -> None:
        """Load the data from the input file.
        """
        self.data = pd.read_csv(self.file_path, delimiter=self.delimiter, encoding='utf-8', on_bad_lines='skip', header=self.header)


    def filter_nsfw(self, filter_column: str, nsfw_words: Union[str, set, list] = None) -> None:
            """Filter the data to remove rows containing NSFW words.

            Args:
                nsfw_words (str, set, list, optional): NSFW words to filter out. Can be a path to a text file, a set, a list of words, or a URL to auto-download the list. If not provided, it will be auto-downloaded from the provided URL or a default URL.
                filter_column (str): The column to use for filtering.

            Raises:
                ValueError: If data is not loaded. Call load_data() first.
                ValueError: If nsfw_words doesn't match the expected formats.
                ConnectionError: If auto-download of NSFW words list fails.
            """
            if self.data is None:
                raise ValueError("Data not loaded. Call load_data() first.")
            
            if nsfw_words is None:
                nsfw_words = self.auto_download_nsfw_words(DEFAULT_NSFW_URL)
            elif isinstance(nsfw_words, str):
                if nsfw_words.startswith("http://") or nsfw_words.startswith("https://"):
                    nsfw_words = self.auto_download_nsfw_words(nsfw_words)
                else:
                    try:
                        with open(nsfw_words, 'r') as file:
                            nsfw_words = {word.strip().lower() for word in file}
                    except FileNotFoundError:
                        raise ValueError(f"File with NSFW words {nsfw_words} not found.")
            elif isinstance(nsfw_words, (list, set)):
                nsfw_words = set([word.lower() for word in nsfw_words])
            else:
                raise ValueError("nsfw_words must be a string (file path), set, list, or URL.")

            if filter_column not in self.data.columns:
                raise ValueError(f"Column {filter_column} not found in data.")
            
            pattern = r'\b(?:' + '|'.join(nsfw_words) + r')\b'
            filtered_data = self.data[~self.data[filter_column].str.lower().str.contains(pattern, case=False, na=False)]

            self.data = filtered_data


    def auto_download_nsfw_words(self, url: str) -> set:
        """Auto-download the NSFW words list from the provided URL.

        Args:
            url (str): The URL to download the NSFW words list.

        Returns:
            set: The set of NSFW words.

        Raises:
            ConnectionError: If auto-download of NSFW words list fails.
        """
        try:
            response = requests.get(url)
            response.raise_for_status()
            nsfw_words = {word.strip().lower() for word in response.text.split('\n')}
            return nsfw_words
        except requests.exceptions.RequestException:
            raise ConnectionError(f"Failed to download NSFW words list from {url}.")


    def generate_samples(self, sample_sizes: List[int], base_dir: str = os.getcwd(), file_format: str = 'tsv') -> None:
        """Generate samples from the data and save them to separate files.

        Args:
            sample_sizes (List[int]): A list of sample sizes.
            base_dir (str, optional): The base directory where sample files will be saved. Defaults to the current working directory.
            file_format (str, optional): The file format to save the samples. Defaults to 'tsv'.

        Raises:
            ValueError: If data is not loaded. Call load_data() first.

        **Note:** The `base_dir` parameter will be created if it does not already exist.
        """
        if self.data is None:
            raise ValueError("Data not loaded. Call load_data() first.")
        
        if base_dir is None:
            base_dir = os.getcwd()

        if not os.path.exists(base_dir):
            os.makedirs(base_dir)

        for sample_size in sample_sizes:
            sampled_data = self.data.sample(n=sample_size, replace=self.sample_with_replacement)
            filename = os.path.join(base_dir, f"sample_{sample_size}.{file_format}")
            sampled_data.to_csv(filename, sep=self.delimiter, index=False, encoding='utf-8')